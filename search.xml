<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Be carefull with precision issue in Numpy</title>
    <url>/2024/10/10/precision-issue-numpy/</url>
    <content><![CDATA[<h1 id="the-complex-type-in-numpy"><a class="markdownIt-Anchor" href="#the-complex-type-in-numpy"></a> The <code>complex</code> type in Numpy</h1>
<p>According to the official document of Numpy, <code>numpy.complex128</code> is composed of 2 64-bit-precision floating-point numbers. So, the <code>numpy.complex64</code> is composed of 2 32-bit-precision floating-point numbers, which might lead to a loss of precision when you assign a <code>numpy.float64</code> to a <code>numpy.ndarray</code> whose <code>dtype</code> is <code>numpy.complex64</code>.</p>
<h1 id="an-example"><a class="markdownIt-Anchor" href="#an-example"></a> An example</h1>
<p>At first, we generate two matrices whose type of elements are <code>numpy.complex64</code> and <code>numpy.float64</code>,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A = np.zeros((<span class="number">3</span>, <span class="number">3</span>), dtype = np.complex64)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.dtype</span><br><span class="line">dtype(<span class="string">&#x27;complex64&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B = np.random.randn(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B.dtype</span><br><span class="line">dtype(<span class="string">&#x27;float64&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B</span><br><span class="line">array([[-<span class="number">1.39295264</span>, -<span class="number">1.93480849</span>],</span><br><span class="line">       [-<span class="number">0.18605461</span>, -<span class="number">0.2380665</span> ]])</span><br></pre></td></tr></table></figure>
<p>now we try to assign the elements of <code>B</code> to <code>A</code>,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>A[<span class="number">0</span>:<span class="number">2</span>, <span class="number">0</span>:<span class="number">2</span>] = B</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.dtype</span><br><span class="line">dtype(<span class="string">&#x27;complex64&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A</span><br><span class="line">array([[-<span class="number">1.3929527</span>+<span class="number">0.j</span>, -<span class="number">1.9348085</span>+<span class="number">0.j</span>,  <span class="number">0.</span>       +<span class="number">0.j</span>],</span><br><span class="line">       [-<span class="number">0.1860546</span>+<span class="number">0.j</span>, -<span class="number">0.2380665</span>+<span class="number">0.j</span>,  <span class="number">0.</span>       +<span class="number">0.j</span>],</span><br><span class="line">       [ <span class="number">0.</span>       +<span class="number">0.j</span>,  <span class="number">0.</span>       +<span class="number">0.j</span>,  <span class="number">0.</span>       +<span class="number">0.j</span>]], dtype=complex64)</span><br></pre></td></tr></table></figure>
<p>we can see that the <code>dtype</code> of <code>A</code> is still <code>complex64</code>, and now we calculate the singular values of <code>A</code> by <code>scipy.linalg.svdvals</code>,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scipy.linalg <span class="keyword">import</span> svdvals</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>siv = svdvals(A)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>siv.dtype</span><br><span class="line">dtype(<span class="string">&#x27;float32&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>siv</span><br><span class="line">array([<span class="number">2.4031136</span> , <span class="number">0.01180331</span>, <span class="number">0.</span>        ], dtype=float32)</span><br></pre></td></tr></table></figure>
<p>As a result, the <code>dtype</code> of singular values is <code>numpy.float32</code>.</p>
<h1 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h1>
<p>We should always fix the number of <code>complex</code> as the two times of <code>float</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>A = np.zeros((<span class="number">3</span>,<span class="number">3</span>), dtype= np.complex128)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B = np.random.randn(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A</span><br><span class="line">array([[<span class="number">0.</span>+<span class="number">0.j</span>, <span class="number">0.</span>+<span class="number">0.j</span>, <span class="number">0.</span>+<span class="number">0.j</span>],</span><br><span class="line">       [<span class="number">0.</span>+<span class="number">0.j</span>, <span class="number">0.</span>+<span class="number">0.j</span>, <span class="number">0.</span>+<span class="number">0.j</span>],</span><br><span class="line">       [<span class="number">0.</span>+<span class="number">0.j</span>, <span class="number">0.</span>+<span class="number">0.j</span>, <span class="number">0.</span>+<span class="number">0.j</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.dtype</span><br><span class="line">dtype(<span class="string">&#x27;complex128&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B</span><br><span class="line">array([[-<span class="number">0.0713599</span> ,  <span class="number">1.52210386</span>],</span><br><span class="line">       [-<span class="number">0.74102553</span>, -<span class="number">0.6968513</span> ]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B.dtype</span><br><span class="line">dtype(<span class="string">&#x27;float64&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A[<span class="number">0</span>:<span class="number">2</span>, <span class="number">0</span>:<span class="number">2</span>] = B</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A</span><br><span class="line">array([[-<span class="number">0.0713599</span> +<span class="number">0.j</span>,  <span class="number">1.52210386</span>+<span class="number">0.j</span>,  <span class="number">0.</span>        +<span class="number">0.j</span>],</span><br><span class="line">       [-<span class="number">0.74102553</span>+<span class="number">0.j</span>, -<span class="number">0.6968513</span> +<span class="number">0.j</span>,  <span class="number">0.</span>        +<span class="number">0.j</span>],</span><br><span class="line">       [ <span class="number">0.</span>        +<span class="number">0.j</span>,  <span class="number">0.</span>        +<span class="number">0.j</span>,  <span class="number">0.</span>        +<span class="number">0.j</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.dtype</span><br><span class="line">dtype(<span class="string">&#x27;complex128&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>siv = svdvals(A)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>siv.dtype</span><br><span class="line">dtype(<span class="string">&#x27;float64&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>siv</span><br><span class="line">array([<span class="number">1.69531001</span>, <span class="number">0.6946488</span> , <span class="number">0.</span>        ])</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Numpy and Scipy</tag>
      </tags>
  </entry>
</search>
